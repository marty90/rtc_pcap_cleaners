#!/usr/bin/env python3

import socket
import dpkt
import sys
import io

UDP_PORTS = set(range(1000,1100))

UDP_LEN = 15

# Parameters
TRIM = 2
START_PROBE_LEN = 10


# Print help
if ( len(sys.argv) == 2 and sys.argv[1] == '-h' ) or ( sys.stdin.isatty() and len(sys.argv) == 1 ):
    print('''\
xCloud Pcap Cleaner 1.0 -- Martino Trevisan (martino.trevisan@polito.it)
Clean a capture file to make xCloud RTP flows look like standard ones.
Usage: xcloud_pcap_cleaner [infile] [outfile]
    If outfile is omitted, print on the standard output.
    If infile is omitted, read from the standard input.''')
    exit()

# Get Args
IN_STREAM  = open(sys.argv[1], 'rb') if len(sys.argv) >= 2 else sys.stdin.buffer
OUT_STREAM = open(sys.argv[2], 'wb') if len(sys.argv) >= 3 else sys.stdout.buffer

# Function to print addresses
def inet_to_str(inet):
    try:
        return socket.inet_ntop(socket.AF_INET, inet)
    except ValueError:
        return socket.inet_ntop(socket.AF_INET6, inet)

# Try Pcap and PcapNG
probe = io.BytesIO(IN_STREAM.peek(START_PROBE_LEN))
try:
    pcap        = dpkt.pcap.Reader(probe)
    pcap        = dpkt.pcap.Reader(IN_STREAM)
except ValueError:
    pcap        = dpkt.pcapng.Reader(IN_STREAM)

output_file = dpkt.pcap.Writer(OUT_STREAM)

# Stats
xcloud_streams = set()
tot_pkt = 0
xcloud_pkt = 0

# Iterate over packets
for ts, buf in pcap:
    eth = dpkt.ethernet.Ethernet(buf)
    
    # Check IPv4 or IPv6
    if isinstance(eth.data, dpkt.ip.IP) or isinstance(eth.data, dpkt.ip6.IP6):
        ip = eth.data

        # Check UDP
        if isinstance(ip.data, dpkt.udp.UDP):
            udp = ip.data

            # Check ports
            if (  udp.sport in UDP_PORTS or udp.dport in UDP_PORTS ) and type(udp.data) == bytes:

                # Check Magic
                tup = (ip.src, ip.dst, udp.sport, udp.dport)
                tup_rev = (ip.dst, ip.src, udp.dport, udp.sport)

                # Check xCloud flow
                if udp.ulen == 15 and udp.data[0:3] == bytes.fromhex("000000") and udp.data[5:7] == bytes.fromhex("0000"):

                    if not tup in xcloud_streams:
                        print ("xCloud flow detected: {}:{} -> {}:{}".format(
                               inet_to_str(ip.src), udp.sport, inet_to_str(ip.dst), udp.dport),
                            file = sys.stderr)
                        xcloud_streams.add(tup)

                # It is xCloud
                if  ( tup in xcloud_streams or tup_rev in xcloud_streams ) and \
                    ( udp.data[2:3] ==  bytes.fromhex("80")  or udp.data[2:3] ==  bytes.fromhex("90")):
                    xcloud_pkt += 1

                    # Shorten data
                    udp.ulen -= TRIM
                    new_data = udp.data[TRIM:]
                    udp.data = bytes(new_data)

    tot_pkt += 1
    output_file.writepkt(eth, ts)

print("Total packets: {}, xCloud RTP packets: {}".format(tot_pkt, xcloud_pkt), file = sys.stderr)
